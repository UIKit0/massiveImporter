// The MIT License
//	
// Copyright (c) 2008 James Piechota
//	
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

proc loadOptionVars()
{
	string $simType = `optionVar -q nsImportMsvSimTypeOption`;
	optionMenuGrp -e -value $simType nsImportMsvSimTypeMenu;

	string $simDir = `optionVar -q nsImportMsvSimDirOption`;
	textFieldButtonGrp -e -fileName $simDir nsImportMsvSimField;

	string $masFile = `optionVar -q nsImportMsvMasFileOption`;
	textFieldButtonGrp -e -fileName $masFile nsImportMsvMasField;

	string $callsheet = `optionVar -q nsImportMsvCallsheetOption`;
	textFieldButtonGrp -e -fileName $callsheet nsImportMsvCallsheetField;
	
	int $loadGeometry = `optionVar -q nsImportMsvLoadGeometryOption`;
	checkBoxGrp -e -value1 $loadGeometry nsImportMsvLoadOptions;

	string $skinType = `optionVar -q nsImportMsvSkinTypeOption`;
	optionMenuGrp -e -value $skinType nsImportMsvSkinTypeMenu;

	int $loadMaterials = `optionVar -q nsImportMsvLoadMaterialsOption`;
	checkBoxGrp -e -value2 $loadMaterials nsImportMsvLoadOptions;

	int $loadSegments = `optionVar -q nsImportMsvLoadSegmentsOption`;
	checkBoxGrp -e -value3 $loadSegments nsImportMsvLoadOptions;

	string $materialType = `optionVar -q nsImportMsvMaterialTypeOption`;
	optionMenuGrp -e -value $materialType nsImportMsvMaterialTypeMenu;
	
	int $frameStep = `optionVar -q nsImportMsvFrameStepOption`;
	intSliderGrp -e -value $frameStep nsImportMsvFrameStepSlider;

	int $instanceSegments = `optionVar -q nsImportMsvInstanceSegmentsOption`;
	checkBoxGrp -e -value1 $instanceSegments nsImportMsvInstanceSegmentsCheck;

	int $cacheGeometry = `optionVar -q nsImportMsvCacheGeometryOption`;
	checkBoxGrp -e -value1 $cacheGeometry nsImportMsvCacheGeometryCheck;

	int $deleteSkeleton = `optionVar -q nsImportMsvDeleteSkeletonOption`;
	checkBoxGrp -e -value1 $deleteSkeleton nsImportMsvDeleteSkeletonCheck;
	
	string $cacheDir = `optionVar -q nsImportMsvCacheDirOption`;
	textFieldButtonGrp -e -fileName $cacheDir nsImportMsvCacheField;

	int $useSelections = `optionVar -q nsImportMsvUseSelectionsOption`;
	if ( $useSelections )
	{
		radioButtonGrp -e -select 2 nsImportMsvSelectionRadio;
	}
	else
	{
		radioButtonGrp -e -select 1 nsImportMsvSelectionRadio;
	}
}

proc resetOptionVars(int $forceFactorySettings)
{
	//  Use timeline
	//
	if ($forceFactorySettings || !`optionVar -exists nsImportMsvSimTypeOption`) {
		optionVar -stringValue nsImportMsvSimTypeOption "apf";
	}
	
	if ($forceFactorySettings || !`optionVar -exists nsImportMsvSimDirOption`) {
		optionVar -stringValue nsImportMsvSimDirOption "";
	}
	
	if ($forceFactorySettings || !`optionVar -exists nsImportMsvMasFileOption`) {
		optionVar -stringValue nsImportMsvMasFileOption "";
	}
	
	if ($forceFactorySettings || !`optionVar -exists nsImportMsvCallsheetOption`) {
		optionVar -stringValue nsImportMsvCallsheetOption "";
	}
	
	if ($forceFactorySettings || !`optionVar -exists nsImportMsvLoadGeometryOption`) {
		optionVar -intValue nsImportMsvLoadGeometryOption true;
	}

	if ($forceFactorySettings || !`optionVar -exists nsImportMsvSkinTypeOption`) {
		optionVar -stringValue nsImportMsvSkinTypeOption "smooth";
	}
	
	if ($forceFactorySettings || !`optionVar -exists nsImportMsvLoadSegmentsOption`) {
		optionVar -intValue nsImportMsvLoadSegmentsOption true;
	}
	
	if ($forceFactorySettings || !`optionVar -exists nsImportMsvLoadMaterialsOption`) {
		optionVar -intValue nsImportMsvLoadMaterialsOption true;
	} 

	if ($forceFactorySettings || !`optionVar -exists nsImportMsvMaterialTypeOption`) {
		optionVar -stringValue nsImportMsvMaterialTypeOption "Maya blinn";
	}

	if ($forceFactorySettings || !`optionVar -exists nsImportMsvFrameStepOption`) {
		optionVar -intValue nsImportMsvFrameStepOption 1;
	}

	if ($forceFactorySettings || !`optionVar -exists nsImportMsvInstanceSegmentsOption`) {
		optionVar -intValue nsImportMsvInstanceSegmentsOption true;
	}

	if ($forceFactorySettings || !`optionVar -exists nsImportMsvCacheGeometryOption`) {
		optionVar -intValue nsImportMsvCacheGeometryOption false;
	}

	if ($forceFactorySettings || !`optionVar -exists nsImportMsvDeleteSkeletonOption`) {
		optionVar -intValue nsImportMsvDeleteSkeletonOption false;
	}

	if ($forceFactorySettings || !`optionVar -exists nsImportMsvCacheDirOption`) {
		optionVar -stringValue nsImportMsvCacheDirOption "";
	}
	
	if ($forceFactorySettings || !`optionVar -exists nsImportMsvUseSelectionsOption`) {
		optionVar -intValue nsImportMsvUseSelectionsOption false;
	}
}

global proc nsImportMsvCallback( string $parent )
{
	setParent $parent;

	string $simType = `optionMenuGrp -q -value nsImportMsvSimTypeMenu`;
	optionVar -stringValue nsImportMsvSimTypeOption $simType;

	string $simDir = `textFieldButtonGrp -q -fileName nsImportMsvSimField`;
	optionVar -stringValue nsImportMsvSimDirOption $simDir;

	string $masFile = `textFieldButtonGrp -q -fileName nsImportMsvMasField`;
	optionVar -stringValue nsImportMsvMasFileOption $masFile;
	
	string $callsheet = `textFieldButtonGrp -q -fileName nsImportMsvCallsheetField`;
	optionVar -stringValue nsImportMsvCallsheetOption $callsheet;

	int $loadGeometry = `checkBoxGrp -q -value1 nsImportMsvLoadOptions`;
	optionVar -intValue nsImportMsvLoadGeometryOption $loadGeometry;

	string $skinType = `optionMenuGrp -q -value nsImportMsvSkinTypeMenu`;
	optionVar -stringValue nsImportMsvSkinTypeOption $skinType;

	int $loadMaterials = `checkBoxGrp -q -value2 nsImportMsvLoadOptions`;
	optionVar -intValue nsImportMsvLoadMaterialsOption $loadMaterials;

	int $loadSegments = `checkBoxGrp -q -value3 nsImportMsvLoadOptions`;
	optionVar -intValue nsImportMsvLoadSegmentsOption $loadSegments;

	string $materialType = `optionMenuGrp -q -value nsImportMsvMaterialTypeMenu`;
	optionVar -stringValue nsImportMsvMaterialTypeOption $materialType;

	int $frameStep = `intSliderGrp -q -value nsImportMsvFrameStepSlider`;
	optionVar -intValue nsImportMsvFrameStepOption $frameStep;

	int $instanceSegments = `checkBoxGrp -q -value1 nsImportMsvInstanceSegmentsCheck`;
	optionVar -intValue nsImportMsvInstanceSegmentsOption $instanceSegments;

	int $cacheGeometry = `checkBoxGrp -q -value1 nsImportMsvCacheGeometryCheck`;
	optionVar -intValue nsImportMsvCacheGeometryOption $cacheGeometry;

	int $deleteSkeleton = `checkBoxGrp -q -value1 nsImportMsvDeleteSkeletonCheck`;
	optionVar -intValue nsImportMsvDeleteSkeletonOption $deleteSkeleton;
	
	string $cacheDir = `textFieldButtonGrp -q -fileName nsImportMsvCacheField`;
	optionVar -stringValue nsImportMsvCacheDirOption $cacheDir;

	int $useSelection = (2 == `radioButtonGrp -q -select nsImportMsvSelectionRadio`);
	optionVar -intValue nsImportMsvUseSelectionsOption $useSelection;

	nsPerformImportMsv( 0 );
}

global proc nsImportMsvUpdateSelections()
{
	int $useSelection = (2 == `radioButtonGrp -q -select nsImportMsvSelectionRadio`);

	textScrollList -e -enable $useSelection nsImportMsvSelectionList;

	if ( $useSelection )
	{
		textScrollList -e -removeAll nsImportMsvSelectionList;
		string $masFile = `textFieldButtonGrp -q -fileName nsImportMsvMasField`;
		string $selections[];
		if ( !catch($selections = `eval("nsImportMsv -q -selection -masFile \"" + $masFile + "\"")`) )
		{
			for ( $selection in $selections )
			{
				textScrollList -e -append $selection nsImportMsvSelectionList;
			}
		}
	}
}

global proc nsImportMsvHideWidgets()
{
	int $loadGeometry = `checkBoxGrp -q -value1 nsImportMsvLoadOptions`;
	int $loadMaterials = `checkBoxGrp -q -value2 nsImportMsvLoadOptions`;
	int $loadSegments = `checkBoxGrp -q -value3 nsImportMsvLoadOptions`;
	int $cacheGeometry = `checkBoxGrp -q -value1 nsImportMsvCacheGeometryCheck`;
	
	optionMenuGrp -e -enable $loadGeometry nsImportMsvSkinTypeMenu;
	optionMenuGrp -e -enable $loadMaterials nsImportMsvMaterialTypeMenu;
	checkBoxGrp -e -enable $loadSegments nsImportMsvInstanceSegmentsCheck;
	checkBoxGrp -e -enable $cacheGeometry nsImportMsvDeleteSkeletonCheck;
	textFieldButtonGrp -e -enable $cacheGeometry nsImportMsvCacheField;
}

global proc int nsImportMsvBrowseMas( string $file, string $type )
{
	if ( "mas" != `fileExtension $file` )
	{
		warning($file + " is not a Massive setup file (.mas).");
		return false;
	}
	textFieldButtonGrp -e -fileName $file nsImportMsvMasField;
	nsImportMsvUpdateSelections();
	return true;
}

global proc int nsImportMsvBrowseSim( string $dir, string $type )
{
	if ( !`filetest -d $dir` )
	{
		warning($dir + " is not a directory.");
		return false;
	}
	textFieldButtonGrp -e -fileName $dir nsImportMsvSimField;
	return true;
}

global proc int nsImportMsvBrowseCallsheet( string $file, string $type )
{
	textFieldButtonGrp -e -fileName $file nsImportMsvCallsheetField;
	return true;
}

global proc int nsImportMsvBrowseCache( string $dir, string $type )
{
	if ( !`filetest -d $dir` )
	{
		warning($dir + " is not a directory.");
		return false;
	}
	textFieldButtonGrp -e -fileName $dir nsImportMsvCacheField;
	return true;
}

proc nsImportMsvOptions()
{
	resetOptionVars( false );

	//	Get the option box.
	//
	//  The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	Activate the default UI template so that the layout of this 
	//	option box is consistent with the layout of the rest of the 
	//	application.
	//
	setUITemplate -pushTemplate DefaultTemplate;

	//	Turn on the wait cursor.
	//
	waitCursor -state 1;

	//	RECOMMENDATION:  Place the UI in a scroll layout.  If the 
	//	option box window is ever resized such that it's entire 
	//	contents is not visible then the scroll bars provided by the
	//	scroll layout will allow the user to access the hidden UI.
	//
	tabLayout -tv false -scr true;
	
	string $parent = `columnLayout -adjustableColumn true`;

	string $mainForm = `formLayout -numberOfDivisions 100`;

 	optionMenuGrp
		-label "Sim Type"
		-adjustableColumn 2
		nsImportMsvSimTypeMenu;
 	menuItem -label "apf";
 	menuItem -label "amc";
 	
	textFieldButtonGrp
		-label "Setup File (.mas)"
		-text ""
		-buttonLabel "Browse"
		-buttonCommand "fileBrowser \"nsImportMsvBrowseMas\" \"Ok\" \"\" 0"
		-changeCommand "nsImportMsvUpdateSelections"
		nsImportMsvMasField;
		
	textFieldButtonGrp
		-label "Sim Directory"
		-text ""
		-buttonLabel "Browse"
		-buttonCommand "fileBrowser \"nsImportMsvBrowseSim\" \"Ok\" \"\" 4"
		nsImportMsvSimField;

	textFieldButtonGrp
		-label "Callsheet"
		-text ""
		-buttonLabel "Browse"
		-buttonCommand "fileBrowser \"nsImportMsvBrowseCallsheet\" \"Ok\" \"\" 0"
		nsImportMsvCallsheetField;
 
	frameLayout
		-label "Options"
		-borderStyle "etchedIn"
		-collapse false
		-collapsable true
		nsImportMsvOptionsFrame;

		string $optionsForm = `formLayout -numberOfDivisions 100`;

			checkBoxGrp
	        	-numberOfCheckBoxes 3
	        	-vertical
	        	-label "Load:"
	        	-labelArray3 "Geometry" "Materials" "Segment Shapes"
	        	-changeCommand "nsImportMsvHideWidgets"
	        	nsImportMsvLoadOptions;

		 	optionMenuGrp
				-label "Skin type:"
				-adjustableColumn 2
				nsImportMsvSkinTypeMenu;
		 	menuItem -label "smooth";
		 	menuItem -label "chunk";

		 	optionMenuGrp
				-label "Load materials as:"
				-adjustableColumn 2
				nsImportMsvMaterialTypeMenu;
		 	menuItem -label "Maya blinn";
		 	menuItem -label "Maya lambert";
		 	
			checkBoxGrp
	        	-numberOfCheckBoxes 1
	        	-vertical
	        	-label "Instance Segments:"
	        	nsImportMsvInstanceSegmentsCheck;


			intSliderGrp
				-label "Frame step:"
				-field true
				-minValue 1
				-fieldMaxValue 1000
				-adjustableColumn 3
				nsImportMsvFrameStepSlider;

		formLayout -edit
	 		-attachForm		nsImportMsvLoadOptions		"top"		5
	 		-attachForm		nsImportMsvLoadOptions		"left"		5
	 		-attachForm		nsImportMsvLoadOptions		"right"		5

			-attachControl	nsImportMsvSkinTypeMenu		"top"		5 nsImportMsvLoadOptions
	 		-attachForm		nsImportMsvSkinTypeMenu		"left"		5
	 		-attachForm		nsImportMsvSkinTypeMenu		"right"		5
			-attachNone		nsImportMsvSkinTypeMenu		"bottom"

			-attachControl	nsImportMsvMaterialTypeMenu	"top"		5 nsImportMsvSkinTypeMenu
	 		-attachForm		nsImportMsvMaterialTypeMenu	"left"		5
	 		-attachForm		nsImportMsvMaterialTypeMenu	"right"		5
			-attachNone		nsImportMsvMaterialTypeMenu	"bottom"

			-attachControl	nsImportMsvInstanceSegmentsCheck	"top"		5 nsImportMsvMaterialTypeMenu
	 		-attachForm		nsImportMsvInstanceSegmentsCheck	"left"		5
	 		-attachForm		nsImportMsvInstanceSegmentsCheck	"right"		5
			-attachNone		nsImportMsvInstanceSegmentsCheck	"bottom"

			-attachControl	nsImportMsvFrameStepSlider	"top"		5 nsImportMsvInstanceSegmentsCheck
	 		-attachForm		nsImportMsvFrameStepSlider	"left"		5
	 		-attachForm		nsImportMsvFrameStepSlider	"right"		5
			-attachNone		nsImportMsvFrameStepSlider	"bottom"
		$optionsForm;

		setParent ..;
	setParent ..;
		
	frameLayout
		-label "Caching"
		-borderStyle "etchedIn"
		-collapse true
		-collapsable true
		nsImportMsvCachingFrame;

		string $optionsForm = `formLayout -numberOfDivisions 100`;

			checkBoxGrp
	        	-numberOfCheckBoxes 1
	        	-label "Cache geometry:"
	        	-changeCommand "nsImportMsvHideWidgets"
	        	nsImportMsvCacheGeometryCheck;

			checkBoxGrp
	        	-numberOfCheckBoxes 1
	        	-label "Delete skeleton:"
	        	-changeCommand "nsImportMsvHideWidgets"
	        	nsImportMsvDeleteSkeletonCheck;

			textFieldButtonGrp
				-label "Cache Directory"
				-text ""
				-buttonLabel "Browse"
				-buttonCommand "fileBrowser \"nsImportMsvBrowseCache\" \"Ok\" \"\" 4"
				nsImportMsvCacheField;


		formLayout -edit
	 		-attachForm		nsImportMsvCacheGeometryCheck		"top"		5
	 		-attachForm		nsImportMsvCacheGeometryCheck		"left"		5
	 		-attachForm		nsImportMsvCacheGeometryCheck		"right"		5

			-attachControl	nsImportMsvDeleteSkeletonCheck		"top"		5 nsImportMsvCacheGeometryCheck
	 		-attachForm		nsImportMsvDeleteSkeletonCheck		"left"		5
	 		-attachForm		nsImportMsvDeleteSkeletonCheck		"right"		5
			-attachNone		nsImportMsvDeleteSkeletonCheck		"bottom"

			-attachControl	nsImportMsvCacheField	"top"		5 nsImportMsvDeleteSkeletonCheck
	 		-attachForm		nsImportMsvCacheField	"left"		5
	 		-attachForm		nsImportMsvCacheField	"right"		5
			-attachNone		nsImportMsvCacheField	"bottom"
		$optionsForm;

		setParent ..;
	setParent ..;
	
	frameLayout
		-label "Selections"
		-borderStyle "etchedIn"
		-collapse true
		-collapsable true
		nsImportMsvSelectionsFrame;

		string $selectionsForm = `formLayout -numberOfDivisions 100`;

		radioButtonGrp
			-vertical
			-select 1
			-columnWidth 1 20
			-columnWidth 2 200
			-numberOfRadioButtons 2
    		-labelArray2 "Load all agents" "Load only these selections:"
    		-changeCommand "nsImportMsvUpdateSelections"
    		nsImportMsvSelectionRadio;
    		
    	textScrollList
    		-numberOfRows 10
    		-allowMultiSelection true
    		nsImportMsvSelectionList;

		formLayout -edit
	 		-attachForm		nsImportMsvSelectionRadio		"top"		5
	 		-attachForm		nsImportMsvSelectionRadio		"left"		5
	 		//-attachForm		nsImportMsvSelectionRadio		"right"		5
	 		
			-attachForm		nsImportMsvSelectionList			"top"		5
	 		-attachControl	nsImportMsvSelectionList			"left"		5 nsImportMsvSelectionRadio
	 		-attachForm		nsImportMsvSelectionList			"right"		5
			-attachForm		nsImportMsvSelectionList			"bottom"	5

		$selectionsForm;

		setParent ..;
	setParent ..;
 
 	//
	
	formLayout -edit
 		-attachForm		nsImportMsvMasField			"top"		5
 		-attachForm		nsImportMsvMasField			"left"		5
 		-attachForm		nsImportMsvMasField			"right"		5

		-attachControl	nsImportMsvSimField			"top"		5 nsImportMsvMasField
 		-attachForm		nsImportMsvSimField			"left"		5
 		-attachForm		nsImportMsvSimField			"right"		5
		-attachNone		nsImportMsvSimField			"bottom"

		-attachControl	nsImportMsvCallsheetField	"top"		5 nsImportMsvSimField
 		-attachForm		nsImportMsvCallsheetField	"left"		5
 		-attachForm		nsImportMsvCallsheetField	"right"		5
		-attachNone		nsImportMsvCallsheetField	"bottom"

		-attachControl	nsImportMsvSimTypeMenu		"top"		5 nsImportMsvCallsheetField
 		-attachForm		nsImportMsvSimTypeMenu		"left"		5
 		-attachForm		nsImportMsvSimTypeMenu		"right"		5
		-attachNone		nsImportMsvSimTypeMenu		"bottom"

		-attachControl	nsImportMsvOptionsFrame		"top"		5 nsImportMsvSimTypeMenu
 		-attachForm		nsImportMsvOptionsFrame		"left"		5
 		-attachForm		nsImportMsvOptionsFrame		"right"		5
		-attachNone		nsImportMsvOptionsFrame		"bottom"

		-attachControl	nsImportMsvCachingFrame		"top"		5 nsImportMsvOptionsFrame
 		-attachForm		nsImportMsvCachingFrame		"left"		5
 		-attachForm		nsImportMsvCachingFrame		"right"		5
		-attachNone		nsImportMsvCachingFrame		"bottom"

		-attachControl	nsImportMsvSelectionsFrame	"top"		5 nsImportMsvCachingFrame
 		-attachForm		nsImportMsvSelectionsFrame	"left"		5
 		-attachForm		nsImportMsvSelectionsFrame	"right"		5
		-attachNone		nsImportMsvSelectionsFrame	"bottom"

 	$mainForm;

	loadOptionVars();
	nsImportMsvHideWidgets();
	nsImportMsvUpdateSelections();

	//	Turn off the wait cursor.
	//
	waitCursor -state 0;
	
	//	Deactivate the default UI template.
	//
	setUITemplate -popTemplate;

	//	Attach actions to those buttons that are applicable to the option
	//	box.  Note that the 'Close' button has a default action attached 
	//	to it that will hide the window.  If a a custom action is
	//	attached to the 'Close' button then be sure to call the 'hide the
	//	option box' procedure within the custom action so that the option
	//	box is hidden properly.

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label "Import"
		-command ("nsImportMsvCallback( \"" + $parent + "\" )")
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ("hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ("nsPerformImportMsv(3)")
		$resetBtn;

	//	Set the option box title.
	//
	setOptionBoxTitle("Massive Import Options");

	//	Show the option box.
	//
	showOptionBox();
}

proc string assembleCmd()
{
	string $cmd = "nsImportMsv";

	string $masFile = `optionVar -q nsImportMsvMasFileOption`;
	if ( "" == $masFile )
	{
		error("Please choose a .mas file to import.");
	}
	$cmd += (" -masFile \"" + $masFile + "\"");

	string $simType = `optionVar -q nsImportMsvSimTypeOption`;
	$simType = `tolower $simType`;
	$cmd += (" -simType \"" + $simType + "\"");

	string $simDir = `optionVar -q nsImportMsvSimDirOption`;
	if ( "" != $simDir )
	{
		$cmd += (" -simDir \"" + $simDir + "\"");
	}

	string $callsheet = `optionVar -q nsImportMsvCallsheetOption`;
	if ( "" != $callsheet )
	{
		$cmd += (" -callsheet \"" + $callsheet + "\"");
	}

	int $loadGeometry = `optionVar -q nsImportMsvLoadGeometryOption`;
	$cmd += (" -loadGeometry " + $loadGeometry);

	int $loadSegments = `optionVar -q nsImportMsvLoadSegmentsOption`;
	$cmd += (" -loadSegments " + $loadSegments);

	int $loadMaterials = `optionVar -q nsImportMsvLoadMaterialsOption`;
	$cmd += (" -loadMaterials " + $loadMaterials);

	string $skinType = `optionVar -q nsImportMsvSkinTypeOption`;
	if ( "chunk" == $skinType )
	{
		// The command support "smooth", "duplicate", and "instance", where
		// duplicate and instance are both forms of chunk skinning. However
		// The current instance implementation is slower and takes more
		// memory than duplicate, so it is not exposed through the UI
		//
		$skinType = "duplicate";
	}
	$cmd += (" -skinType \"" + $skinType + "\"");

	string $materialType = `optionVar -q nsImportMsvMaterialTypeOption`;
	$materialType = `tolower $materialType`;
	if ( "maya blinn" == $materialType )
	{
		$materialType = "blinn";
	}
	else if ( "maya lambert" == $materialType )
	{
		$materialType = "lambert";
	}
	$cmd += (" -materialType \"" + $materialType + "\"");

	int $instanceSegments = `optionVar -q nsImportMsvInstanceSegmentsOption`;
	$cmd += (" -instanceSegments " + $instanceSegments);

	int $frameStep = `optionVar -q nsImportMsvFrameStepOption`;
	$cmd += (" -frameStep " + $frameStep);

	int $cacheGeometry = `optionVar -q nsImportMsvCacheGeometryOption`;
	$cmd += (" -cacheGeometry " + $cacheGeometry);
	
	if ($cacheGeometry)
	{
		int $deleteSkeleton = `optionVar -q nsImportMsvDeleteSkeletonOption`;
		$cmd += (" -deleteSkeleton " + $deleteSkeleton);

		string $cacheDir = `optionVar -q nsImportMsvCacheDirOption`;
		if ( "" != $cacheDir )
		{
			$cmd += (" -cacheDir \"" + $cacheDir + "\"");
		}		
	}

	if ( `optionVar -q nsImportMsvUseSelectionsOption` )
	{
		string $selections[] = `textScrollList -q -selectItem nsImportMsvSelectionList`;
		for ( $selection in $selections )
		{
			$cmd += (" -selection \"" + $selection + "\"");
		}
	}

	return $cmd;
}

global proc string nsPerformImportMsv( int $action )
{
	string $cmd = "";

	switch ($action) {

		//  Execute the command.
		//
		case 0:
			//  Retrieve the option settings
			//
			resetOptionVars(false);

			//  Get the command.
			//
			$cmd = `assembleCmd`;

			//  Execute the command with the option settings.
			//
			evalEcho($cmd);

			break;

		//  Show the option box.
		//
		case 1:
			nsImportMsvOptions();
			break;

		//  Return the command string.
		//
		case 2:
			//  Retrieve the option settings.
			//
			resetOptionVars (false);

			//  Get the command.
			//
			$cmd = `assembleCmd`;
			break;

		// Reset
		//
		case 3:
			resetOptionVars( true );
			loadOptionVars();
			break;
	}
	return $cmd;
}

global proc nsImportMsvWin()
{
	nsPerformImportMsv(1);
}