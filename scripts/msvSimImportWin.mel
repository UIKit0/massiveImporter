// The MIT License
//	
// Copyright (c) 2008 James Piechota
//	
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

proc loadOptionVars()
{
	string $simType = `optionVar -q msvSimImportSimTypeOption`;
	optionMenuGrp -e -value $simType msvSimImportSimTypeMenu;

	string $simDir = `optionVar -q msvSimImportSimDirOption`;
	textFieldButtonGrp -e -fileName $simDir msvSimImportSimField;

	string $masFile = `optionVar -q msvSimImportMasFileOption`;
	textFieldButtonGrp -e -fileName $masFile msvSimImportMasField;

	string $callsheet = `optionVar -q msvSimImportCallsheetOption`;
	textFieldButtonGrp -e -fileName $callsheet msvSimImportCallsheetField;
	
	int $loadGeometry = `optionVar -q msvSimImportLoadGeometryOption`;
	checkBoxGrp -e -value1 $loadGeometry msvSimImportLoadOptions;

	string $skinType = `optionVar -q msvSimImportSkinTypeOption`;
	optionMenuGrp -e -value $skinType msvSimImportSkinTypeMenu;

	string $animType = `optionVar -q msvSimImportAnimTypeOption`;
	optionMenuGrp -e -value $animType msvSimImportAnimTypeMenu;

	int $loadMaterials = `optionVar -q msvSimImportLoadMaterialsOption`;
	checkBoxGrp -e -value2 $loadMaterials msvSimImportLoadOptions;

	int $loadSegments = `optionVar -q msvSimImportLoadSegmentsOption`;
	checkBoxGrp -e -value3 $loadSegments msvSimImportLoadOptions;

	string $materialType = `optionVar -q msvSimImportMaterialTypeOption`;
	optionMenuGrp -e -value $materialType msvSimImportMaterialTypeMenu;
	
	int $frameStep = `optionVar -q msvSimImportFrameStepOption`;
	intSliderGrp -e -value $frameStep msvSimImportFrameStepSlider;

	int $instanceSegments = `optionVar -q msvSimImportInstanceSegmentsOption`;
	checkBoxGrp -e -value1 $instanceSegments msvSimImportInstanceSegmentsCheck;

	int $cacheGeometry = `optionVar -q msvSimImportCacheGeometryOption`;
	checkBoxGrp -e -value1 $cacheGeometry msvSimImportCacheGeometryCheck;

	int $deleteSkeleton = `optionVar -q msvSimImportDeleteSkeletonOption`;
	checkBoxGrp -e -value1 $deleteSkeleton msvSimImportDeleteSkeletonCheck;
	
	string $cacheDir = `optionVar -q msvSimImportCacheDirOption`;
	textFieldButtonGrp -e -fileName $cacheDir msvSimImportCacheField;

	int $useSelections = `optionVar -q msvSimImportUseSelectionsOption`;
	if ( $useSelections )
	{
		radioButtonGrp -e -select 2 msvSimImportSelectionRadio;
	}
	else
	{
		radioButtonGrp -e -select 1 msvSimImportSelectionRadio;
	}
}

proc resetOptionVars(int $forceFactorySettings)
{
	//  Use timeline
	//
	if ($forceFactorySettings || !`optionVar -exists msvSimImportSimTypeOption`) {
		optionVar -stringValue msvSimImportSimTypeOption "apf";
	}
	
	if ($forceFactorySettings || !`optionVar -exists msvSimImportSimDirOption`) {
		optionVar -stringValue msvSimImportSimDirOption "";
	}
	
	if ($forceFactorySettings || !`optionVar -exists msvSimImportMasFileOption`) {
		optionVar -stringValue msvSimImportMasFileOption "";
	}
	
	if ($forceFactorySettings || !`optionVar -exists msvSimImportCallsheetOption`) {
		optionVar -stringValue msvSimImportCallsheetOption "";
	}
	
	if ($forceFactorySettings || !`optionVar -exists msvSimImportLoadGeometryOption`) {
		optionVar -intValue msvSimImportLoadGeometryOption true;
	}

	if ($forceFactorySettings || !`optionVar -exists msvSimImportSkinTypeOption`) {
		optionVar -stringValue msvSimImportSkinTypeOption "smooth";
	}
	
	if ($forceFactorySettings || !`optionVar -exists msvSimImportAnimTypeOption`) {
		optionVar -stringValue msvSimImportAnimTypeOption "curves";
	}
	
	if ($forceFactorySettings || !`optionVar -exists msvSimImportLoadSegmentsOption`) {
		optionVar -intValue msvSimImportLoadSegmentsOption true;
	}
	
	if ($forceFactorySettings || !`optionVar -exists msvSimImportLoadMaterialsOption`) {
		optionVar -intValue msvSimImportLoadMaterialsOption true;
	} 

	if ($forceFactorySettings || !`optionVar -exists msvSimImportMaterialTypeOption`) {
		optionVar -stringValue msvSimImportMaterialTypeOption "Maya blinn";
	}

	if ($forceFactorySettings || !`optionVar -exists msvSimImportFrameStepOption`) {
		optionVar -intValue msvSimImportFrameStepOption 1;
	}

	if ($forceFactorySettings || !`optionVar -exists msvSimImportInstanceSegmentsOption`) {
		optionVar -intValue msvSimImportInstanceSegmentsOption true;
	}

	if ($forceFactorySettings || !`optionVar -exists msvSimImportCacheGeometryOption`) {
		optionVar -intValue msvSimImportCacheGeometryOption false;
	}

	if ($forceFactorySettings || !`optionVar -exists msvSimImportDeleteSkeletonOption`) {
		optionVar -intValue msvSimImportDeleteSkeletonOption false;
	}

	if ($forceFactorySettings || !`optionVar -exists msvSimImportCacheDirOption`) {
		optionVar -stringValue msvSimImportCacheDirOption "";
	}
	
	if ($forceFactorySettings || !`optionVar -exists msvSimImportUseSelectionsOption`) {
		optionVar -intValue msvSimImportUseSelectionsOption false;
	}
}

global proc msvSimImportCallback( string $parent )
{
	setParent $parent;

	string $simType = `optionMenuGrp -q -value msvSimImportSimTypeMenu`;
	optionVar -stringValue msvSimImportSimTypeOption $simType;

	string $simDir = `textFieldButtonGrp -q -fileName msvSimImportSimField`;
	optionVar -stringValue msvSimImportSimDirOption $simDir;

	string $masFile = `textFieldButtonGrp -q -fileName msvSimImportMasField`;
	optionVar -stringValue msvSimImportMasFileOption $masFile;
	
	string $callsheet = `textFieldButtonGrp -q -fileName msvSimImportCallsheetField`;
	optionVar -stringValue msvSimImportCallsheetOption $callsheet;

	int $loadGeometry = `checkBoxGrp -q -value1 msvSimImportLoadOptions`;
	optionVar -intValue msvSimImportLoadGeometryOption $loadGeometry;

	string $skinType = `optionMenuGrp -q -value msvSimImportSkinTypeMenu`;
	optionVar -stringValue msvSimImportSkinTypeOption $skinType;

	string $animType = `optionMenuGrp -q -value msvSimImportAnimTypeMenu`;
	optionVar -stringValue msvSimImportAnimTypeOption $animType;

	int $loadMaterials = `checkBoxGrp -q -value2 msvSimImportLoadOptions`;
	optionVar -intValue msvSimImportLoadMaterialsOption $loadMaterials;

	int $loadSegments = `checkBoxGrp -q -value3 msvSimImportLoadOptions`;
	optionVar -intValue msvSimImportLoadSegmentsOption $loadSegments;

	string $materialType = `optionMenuGrp -q -value msvSimImportMaterialTypeMenu`;
	optionVar -stringValue msvSimImportMaterialTypeOption $materialType;

	int $frameStep = `intSliderGrp -q -value msvSimImportFrameStepSlider`;
	optionVar -intValue msvSimImportFrameStepOption $frameStep;

	int $instanceSegments = `checkBoxGrp -q -value1 msvSimImportInstanceSegmentsCheck`;
	optionVar -intValue msvSimImportInstanceSegmentsOption $instanceSegments;

	int $cacheGeometry = `checkBoxGrp -q -value1 msvSimImportCacheGeometryCheck`;
	optionVar -intValue msvSimImportCacheGeometryOption $cacheGeometry;

	int $deleteSkeleton = `checkBoxGrp -q -value1 msvSimImportDeleteSkeletonCheck`;
	optionVar -intValue msvSimImportDeleteSkeletonOption $deleteSkeleton;
	
	string $cacheDir = `textFieldButtonGrp -q -fileName msvSimImportCacheField`;
	optionVar -stringValue msvSimImportCacheDirOption $cacheDir;

	int $useSelection = (2 == `radioButtonGrp -q -select msvSimImportSelectionRadio`);
	optionVar -intValue msvSimImportUseSelectionsOption $useSelection;

	nsPerformmsvSimImport( 0 );
}

global proc msvSimImportUpdateSelections()
{
	int $useSelection = (2 == `radioButtonGrp -q -select msvSimImportSelectionRadio`);

	textScrollList -e -enable $useSelection msvSimImportSelectionList;

	if ( $useSelection )
	{
		textScrollList -e -removeAll msvSimImportSelectionList;
		string $masFile = `textFieldButtonGrp -q -fileName msvSimImportMasField`;
		string $selections[];
		if ( !catch($selections = `eval("msvSimImport -q -selection -masFile \"" + $masFile + "\"")`) )
		{
			for ( $selection in $selections )
			{
				textScrollList -e -append $selection msvSimImportSelectionList;
			}
		}
	}
}

global proc msvSimImportHideWidgets()
{
	int $loadGeometry = `checkBoxGrp -q -value1 msvSimImportLoadOptions`;
	int $loadMaterials = `checkBoxGrp -q -value2 msvSimImportLoadOptions`;
	int $loadSegments = `checkBoxGrp -q -value3 msvSimImportLoadOptions`;
	int $cacheGeometry = `checkBoxGrp -q -value1 msvSimImportCacheGeometryCheck`;
	
	optionMenuGrp -e -enable $loadGeometry msvSimImportSkinTypeMenu;
	optionMenuGrp -e -enable $loadMaterials msvSimImportMaterialTypeMenu;
	checkBoxGrp -e -enable $loadSegments msvSimImportInstanceSegmentsCheck;
	checkBoxGrp -e -enable $cacheGeometry msvSimImportDeleteSkeletonCheck;
	textFieldButtonGrp -e -enable $cacheGeometry msvSimImportCacheField;
}

global proc int msvSimImportBrowseMas( string $file, string $type )
{
	if ( "mas" != `fileExtension $file` )
	{
		warning($file + " is not a Massive setup file (.mas).");
		return false;
	}
	textFieldButtonGrp -e -fileName $file msvSimImportMasField;
	msvSimImportUpdateSelections();
	return true;
}

global proc int msvSimImportBrowseSim( string $dir, string $type )
{
	if ( !`filetest -d $dir` )
	{
		warning($dir + " is not a directory.");
		return false;
	}
	textFieldButtonGrp -e -fileName $dir msvSimImportSimField;
	return true;
}

global proc int msvSimImportBrowseCallsheet( string $file, string $type )
{
	textFieldButtonGrp -e -fileName $file msvSimImportCallsheetField;
	return true;
}

global proc int msvSimImportBrowseCache( string $dir, string $type )
{
	if ( !`filetest -d $dir` )
	{
		warning($dir + " is not a directory.");
		return false;
	}
	textFieldButtonGrp -e -fileName $dir msvSimImportCacheField;
	return true;
}

proc msvSimImportOptions()
{
	resetOptionVars( false );

	//	Get the option box.
	//
	//  The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	Activate the default UI template so that the layout of this 
	//	option box is consistent with the layout of the rest of the 
	//	application.
	//
	setUITemplate -pushTemplate DefaultTemplate;

	//	Turn on the wait cursor.
	//
	waitCursor -state 1;

	//	RECOMMENDATION:  Place the UI in a scroll layout.  If the 
	//	option box window is ever resized such that it's entire 
	//	contents is not visible then the scroll bars provided by the
	//	scroll layout will allow the user to access the hidden UI.
	//
	tabLayout -tv false -scr true;
	
	string $parent = `columnLayout -adjustableColumn true`;

	string $mainForm = `formLayout -numberOfDivisions 100`;

 	optionMenuGrp
		-label "Sim Type"
		-adjustableColumn 2
		msvSimImportSimTypeMenu;
 	menuItem -label "apf";
 	menuItem -label "amc";
 	
	textFieldButtonGrp
		-label "Setup File (.mas)"
		-text ""
		-buttonLabel "Browse"
		-buttonCommand "fileBrowser \"msvSimImportBrowseMas\" \"Ok\" \"\" 0"
		-changeCommand "msvSimImportUpdateSelections"
		msvSimImportMasField;
		
	textFieldButtonGrp
		-label "Sim Directory"
		-text ""
		-buttonLabel "Browse"
		-buttonCommand "fileBrowser \"msvSimImportBrowseSim\" \"Ok\" \"\" 4"
		msvSimImportSimField;

	textFieldButtonGrp
		-label "Callsheet"
		-text ""
		-buttonLabel "Browse"
		-buttonCommand "fileBrowser \"msvSimImportBrowseCallsheet\" \"Ok\" \"\" 0"
		msvSimImportCallsheetField;
 
	frameLayout
		-label "Options"
		-borderStyle "etchedIn"
		-collapse false
		-collapsable true
		msvSimImportOptionsFrame;

		string $optionsForm = `formLayout -numberOfDivisions 100`;

			checkBoxGrp
	        	-numberOfCheckBoxes 3
	        	-vertical
	        	-label "Load:"
	        	-labelArray3 "Geometry" "Materials" "Segment Shapes"
	        	-changeCommand "msvSimImportHideWidgets"
	        	msvSimImportLoadOptions;

		 	optionMenuGrp
				-label "Skin type:"
				-adjustableColumn 2
				msvSimImportSkinTypeMenu;
		 	menuItem -label "smooth";
		 	menuItem -label "chunk";

		 	optionMenuGrp
				-label "Anim type:"
				-adjustableColumn 2
				msvSimImportAnimTypeMenu;
		 	menuItem -label "curves";
		 	menuItem -label "loader";

		 	optionMenuGrp
				-label "Load materials as:"
				-adjustableColumn 2
				msvSimImportMaterialTypeMenu;
		 	menuItem -label "Maya blinn";
		 	menuItem -label "Maya lambert";
		 	
			checkBoxGrp
	        	-numberOfCheckBoxes 1
	        	-vertical
	        	-label "Instance Segments:"
	        	msvSimImportInstanceSegmentsCheck;


			intSliderGrp
				-label "Frame step:"
				-field true
				-minValue 1
				-fieldMaxValue 1000
				-adjustableColumn 3
				msvSimImportFrameStepSlider;

		formLayout -edit
	 		-attachForm		msvSimImportLoadOptions		"top"		5
	 		-attachForm		msvSimImportLoadOptions		"left"		5
	 		-attachForm		msvSimImportLoadOptions		"right"		5

			-attachControl	msvSimImportSkinTypeMenu		"top"		5 msvSimImportLoadOptions
	 		-attachForm		msvSimImportSkinTypeMenu		"left"		5
	 		-attachForm		msvSimImportSkinTypeMenu		"right"		5
			-attachNone		msvSimImportSkinTypeMenu		"bottom"

			-attachControl	msvSimImportAnimTypeMenu		"top"		5 msvSimImportSkinTypeMenu
	 		-attachForm		msvSimImportAnimTypeMenu		"left"		5
	 		-attachForm		msvSimImportAnimTypeMenu		"right"		5
			-attachNone		msvSimImportAnimTypeMenu		"bottom"

			-attachControl	msvSimImportMaterialTypeMenu	"top"		5 msvSimImportAnimTypeMenu
	 		-attachForm		msvSimImportMaterialTypeMenu	"left"		5
	 		-attachForm		msvSimImportMaterialTypeMenu	"right"		5
			-attachNone		msvSimImportMaterialTypeMenu	"bottom"

			-attachControl	msvSimImportInstanceSegmentsCheck	"top"		5 msvSimImportMaterialTypeMenu
	 		-attachForm		msvSimImportInstanceSegmentsCheck	"left"		5
	 		-attachForm		msvSimImportInstanceSegmentsCheck	"right"		5
			-attachNone		msvSimImportInstanceSegmentsCheck	"bottom"

			-attachControl	msvSimImportFrameStepSlider	"top"		5 msvSimImportInstanceSegmentsCheck
	 		-attachForm		msvSimImportFrameStepSlider	"left"		5
	 		-attachForm		msvSimImportFrameStepSlider	"right"		5
			-attachNone		msvSimImportFrameStepSlider	"bottom"
		$optionsForm;

		setParent ..;
	setParent ..;
		
	frameLayout
		-label "Caching"
		-borderStyle "etchedIn"
		-collapse true
		-collapsable true
		msvSimImportCachingFrame;

		string $optionsForm = `formLayout -numberOfDivisions 100`;

			checkBoxGrp
	        	-numberOfCheckBoxes 1
	        	-label "Cache geometry:"
	        	-changeCommand "msvSimImportHideWidgets"
	        	msvSimImportCacheGeometryCheck;

			checkBoxGrp
	        	-numberOfCheckBoxes 1
	        	-label "Delete skeleton:"
	        	-changeCommand "msvSimImportHideWidgets"
	        	msvSimImportDeleteSkeletonCheck;

			textFieldButtonGrp
				-label "Cache Directory"
				-text ""
				-buttonLabel "Browse"
				-buttonCommand "fileBrowser \"msvSimImportBrowseCache\" \"Ok\" \"\" 4"
				msvSimImportCacheField;


		formLayout -edit
	 		-attachForm		msvSimImportCacheGeometryCheck		"top"		5
	 		-attachForm		msvSimImportCacheGeometryCheck		"left"		5
	 		-attachForm		msvSimImportCacheGeometryCheck		"right"		5

			-attachControl	msvSimImportDeleteSkeletonCheck		"top"		5 msvSimImportCacheGeometryCheck
	 		-attachForm		msvSimImportDeleteSkeletonCheck		"left"		5
	 		-attachForm		msvSimImportDeleteSkeletonCheck		"right"		5
			-attachNone		msvSimImportDeleteSkeletonCheck		"bottom"

			-attachControl	msvSimImportCacheField	"top"		5 msvSimImportDeleteSkeletonCheck
	 		-attachForm		msvSimImportCacheField	"left"		5
	 		-attachForm		msvSimImportCacheField	"right"		5
			-attachNone		msvSimImportCacheField	"bottom"
		$optionsForm;

		setParent ..;
	setParent ..;
	
	frameLayout
		-label "Selections"
		-borderStyle "etchedIn"
		-collapse true
		-collapsable true
		msvSimImportSelectionsFrame;

		string $selectionsForm = `formLayout -numberOfDivisions 100`;

		radioButtonGrp
			-vertical
			-select 1
			-columnWidth 1 20
			-columnWidth 2 200
			-numberOfRadioButtons 2
    		-labelArray2 "Load all agents" "Load only these selections:"
    		-changeCommand "msvSimImportUpdateSelections"
    		msvSimImportSelectionRadio;
    		
    	textScrollList
    		-numberOfRows 10
    		-allowMultiSelection true
    		msvSimImportSelectionList;

		formLayout -edit
	 		-attachForm		msvSimImportSelectionRadio		"top"		5
	 		-attachForm		msvSimImportSelectionRadio		"left"		5
	 		//-attachForm		msvSimImportSelectionRadio		"right"		5
	 		
			-attachForm		msvSimImportSelectionList			"top"		5
	 		-attachControl	msvSimImportSelectionList			"left"		5 msvSimImportSelectionRadio
	 		-attachForm		msvSimImportSelectionList			"right"		5
			-attachForm		msvSimImportSelectionList			"bottom"	5

		$selectionsForm;

		setParent ..;
	setParent ..;
 
 	//
	
	formLayout -edit
 		-attachForm		msvSimImportMasField			"top"		5
 		-attachForm		msvSimImportMasField			"left"		5
 		-attachForm		msvSimImportMasField			"right"		5

		-attachControl	msvSimImportSimField			"top"		5 msvSimImportMasField
 		-attachForm		msvSimImportSimField			"left"		5
 		-attachForm		msvSimImportSimField			"right"		5
		-attachNone		msvSimImportSimField			"bottom"

		-attachControl	msvSimImportCallsheetField	"top"		5 msvSimImportSimField
 		-attachForm		msvSimImportCallsheetField	"left"		5
 		-attachForm		msvSimImportCallsheetField	"right"		5
		-attachNone		msvSimImportCallsheetField	"bottom"

		-attachControl	msvSimImportSimTypeMenu		"top"		5 msvSimImportCallsheetField
 		-attachForm		msvSimImportSimTypeMenu		"left"		5
 		-attachForm		msvSimImportSimTypeMenu		"right"		5
		-attachNone		msvSimImportSimTypeMenu		"bottom"

		-attachControl	msvSimImportOptionsFrame		"top"		5 msvSimImportSimTypeMenu
 		-attachForm		msvSimImportOptionsFrame		"left"		5
 		-attachForm		msvSimImportOptionsFrame		"right"		5
		-attachNone		msvSimImportOptionsFrame		"bottom"

		-attachControl	msvSimImportCachingFrame		"top"		5 msvSimImportOptionsFrame
 		-attachForm		msvSimImportCachingFrame		"left"		5
 		-attachForm		msvSimImportCachingFrame		"right"		5
		-attachNone		msvSimImportCachingFrame		"bottom"

		-attachControl	msvSimImportSelectionsFrame	"top"		5 msvSimImportCachingFrame
 		-attachForm		msvSimImportSelectionsFrame	"left"		5
 		-attachForm		msvSimImportSelectionsFrame	"right"		5
		-attachNone		msvSimImportSelectionsFrame	"bottom"

 	$mainForm;

	loadOptionVars();
	msvSimImportHideWidgets();
	msvSimImportUpdateSelections();

	//	Turn off the wait cursor.
	//
	waitCursor -state 0;
	
	//	Deactivate the default UI template.
	//
	setUITemplate -popTemplate;

	//	Attach actions to those buttons that are applicable to the option
	//	box.  Note that the 'Close' button has a default action attached 
	//	to it that will hide the window.  If a a custom action is
	//	attached to the 'Close' button then be sure to call the 'hide the
	//	option box' procedure within the custom action so that the option
	//	box is hidden properly.

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label "Import"
		-command ("msvSimImportCallback( \"" + $parent + "\" )")
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ("hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ("nsPerformmsvSimImport(3)")
		$resetBtn;

	//	Set the option box title.
	//
	setOptionBoxTitle("Massive Import Options");

	//	Show the option box.
	//
	showOptionBox();
}

proc string assembleCmd()
{
	string $cmd = "msvSimImport";

	string $masFile = `optionVar -q msvSimImportMasFileOption`;
	if ( "" == $masFile )
	{
		error("Please choose a .mas file to import.");
	}
	$cmd += (" -masFile \"" + $masFile + "\"");

	string $simType = `optionVar -q msvSimImportSimTypeOption`;
	$simType = `tolower $simType`;
	$cmd += (" -simType \"" + $simType + "\"");

	string $simDir = `optionVar -q msvSimImportSimDirOption`;
	if ( "" != $simDir )
	{
		$cmd += (" -simDir \"" + $simDir + "\"");
	}

	string $callsheet = `optionVar -q msvSimImportCallsheetOption`;
	if ( "" != $callsheet )
	{
		$cmd += (" -callsheet \"" + $callsheet + "\"");
	}

	int $loadGeometry = `optionVar -q msvSimImportLoadGeometryOption`;
	$cmd += (" -loadGeometry " + $loadGeometry);

	int $loadSegments = `optionVar -q msvSimImportLoadSegmentsOption`;
	$cmd += (" -loadSegments " + $loadSegments);

	int $loadMaterials = `optionVar -q msvSimImportLoadMaterialsOption`;
	$cmd += (" -loadMaterials " + $loadMaterials);

	string $skinType = `optionVar -q msvSimImportSkinTypeOption`;
	if ( "chunk" == $skinType )
	{
		// The command support "smooth", "duplicate", and "instance", where
		// duplicate and instance are both forms of chunk skinning. However
		// The current instance implementation is slower and takes more
		// memory than duplicate, so it is not exposed through the UI
		//
		$skinType = "duplicate";
	}
	$cmd += (" -skinType \"" + $skinType + "\"");

	string $animType = `optionVar -q msvSimImportAnimTypeOption`;
	$cmd += (" -animType \"" + $animType + "\"");

	string $materialType = `optionVar -q msvSimImportMaterialTypeOption`;
	$materialType = `tolower $materialType`;
	if ( "maya blinn" == $materialType )
	{
		$materialType = "blinn";
	}
	else if ( "maya lambert" == $materialType )
	{
		$materialType = "lambert";
	}
	$cmd += (" -materialType \"" + $materialType + "\"");

	int $instanceSegments = `optionVar -q msvSimImportInstanceSegmentsOption`;
	$cmd += (" -instanceSegments " + $instanceSegments);

	int $frameStep = `optionVar -q msvSimImportFrameStepOption`;
	$cmd += (" -frameStep " + $frameStep);

	int $cacheGeometry = `optionVar -q msvSimImportCacheGeometryOption`;
	$cmd += (" -cacheGeometry " + $cacheGeometry);
	
	if ($cacheGeometry)
	{
		int $deleteSkeleton = `optionVar -q msvSimImportDeleteSkeletonOption`;
		$cmd += (" -deleteSkeleton " + $deleteSkeleton);

		string $cacheDir = `optionVar -q msvSimImportCacheDirOption`;
		if ( "" != $cacheDir )
		{
			$cmd += (" -cacheDir \"" + $cacheDir + "\"");
		}		
	}

	if ( `optionVar -q msvSimImportUseSelectionsOption` )
	{
		string $selections[] = `textScrollList -q -selectItem msvSimImportSelectionList`;
		for ( $selection in $selections )
		{
			$cmd += (" -selection \"" + $selection + "\"");
		}
	}

	return $cmd;
}

global proc string nsPerformmsvSimImport( int $action )
{
	string $cmd = "";

	switch ($action) {

		//  Execute the command.
		//
		case 0:
			//  Retrieve the option settings
			//
			resetOptionVars(false);

			//  Get the command.
			//
			$cmd = `assembleCmd`;

			//  Execute the command with the option settings.
			//
			evalEcho($cmd);

			break;

		//  Show the option box.
		//
		case 1:
			msvSimImportOptions();
			break;

		//  Return the command string.
		//
		case 2:
			//  Retrieve the option settings.
			//
			resetOptionVars (false);

			//  Get the command.
			//
			$cmd = `assembleCmd`;
			break;

		// Reset
		//
		case 3:
			resetOptionVars( true );
			loadOptionVars();
			break;
	}
	return $cmd;
}

global proc msvSimImportWin()
{
	nsPerformmsvSimImport(1);
}